##Se genera una clase para realizar ciertas acciones como: 
#Abrir una posicion larga/corta
#Establecer Take profit
#Establecer stop loss


#librerias
import pandas as pd
import numpy as np
import ccxt
import pandas_ta as ta


#funcion para llamar los datos 
def ccxt_ohlcv_to_dataframe(ohlcv):
    df=pd.DataFrame(ohlcv)
    df.columns=['time','open','high','low','close','volume']
    df['date']=pd.to_datetime(df['time']*1000000, infer_datetime_format=True)
    return df
    
    
#Conexion al exchange y seleccion de par
exchange = ccxt.binance()
symbol = 'BTC/USDT'
timeframe = '5m'
ohlcv = exchange.fetch_ohlcv(symbol, timeframe,1000)
df = ccxt_ohlcv_to_dataframe(ohlcv)

#Estrategia a probar, BBollinger
class BBStrategy:
    def __init__(self, bb_len=20,n_std=2.0, rsi_len = 14, rsi_overbought=60, rsi_oversold=40):
        self.bb_len = bb_len
        self.n_std = n_std
        self.rsi_len = rsi_len
        self.rsi_overbought = rsi_overbought
        self.rsi_oversold = rsi_oversold
        
    def setUp(self, df):
        bb = ta.bbands(
            close = df['close'],
            length = self.bb_len,
            std = self.n_std
            )
        df['lbb'] = bb.iloc[:,0]
        df['mbb'] = bb.iloc[:,1]
        df['ubb'] = bb.iloc[:,2]
        
        df['rsi'] = ta.rsi(close=df['close'], length=self.rsi_len)
        print(df)
        self.dataframe = df
    def checkLongSignal(self, i = None):
        df = self.dataframe
        
        if i == None:
            i = len(df)
            
        if (df['rsi'].iloc[i] < self.rsi_overbought) and \
        (df['rsi'].iloc[i] > self.rsi_oversold) and \
        (df['low'].iloc[i-1] < df['lbb'].iloc[i-1]) and \
        (df['low'].iloc[i] > df['lbb'].iloc[i]):
            return True
        return False
    
    def checkShortSignal(self, i = None):
        df = self.dataframe
        
        if i == None:
            i = len(df)
            
        if (df['rsi'].iloc[i] < self.rsi_overbought) and \
        (df['rsi'].iloc[i] > self.rsi_oversold) and \
        (df['high'].iloc[i-1] > df['ubb'].iloc[i-1]) and \
        (df['high'].iloc[i] < df['ubb'].iloc[i]):
            return True
        return False 
        
 #Estructura

class Backtester():
    def __init__(self, initial_balance=50, leverage=1, trailing_stop_loss=False):
        self.initial_balance=initial_balance #es la base, no se modifica
        self.balance= initial_balance # sirve para mirar el resultado
        self.amount= 0
        self.leverage = leverage
        self.fee_cost = 0.02/100 
        self.inv = self.balance*0.01*self.leverage # el porcenraje de riesgo por operacion
        self.profit = [] #el total de beneficio esperado 
        self.drawdown = [] #el total de perdida esperada
        self.winned =0
        self.lossed =0
        
        self.num_operations=0
        self.num_longs=0
        self.num_shorts =0
        
        self.is_long_open = False
        self.is_short_open = False 
        
        self.trailing_stop_loss = trailing_stop_loss
        self.from_opened = 0
        
    def reset_results(self):
        
        self.balance = self.initial_balance
        self.amount=0
        self.profit=[]
        self.drawdown=[]
        self.winned=0
        self.lossed=0
        self.num_operations=0
        self.num_longs=0
        self.num_shorts=0
        self.is_long_open=False
        self.is_short_open=False
        self.from_opened=0
        
        
    def open_position(self, price, side, from_opened=0):
        self.num_operations +=1
        
        if side == 'long':
            self.num_longs +=1
            
            if self.is_long_open:
                self.long_open_price= (self.long_open_price + price)/2
                self.amount += self.inv/price
            else:
                self.is_long_open=True
                self.long_open_price = price
                self.amount = self.inv/price
        elif side == 'short':
            self.num_shorts +=1
            
            if self.is_short_open:
                self.short_open_price = (self.short_open_price + price)/2
                self.amount += self.inv/price
            else:
                self.is_short_open = True
                self.short_open_price = price
                self.amount = self.inv/price
                
        #self.amount = self.inv/price
        
        if self.trailing_stop_loss:
            self.from_opened = from_opened
                
    def close_position(self, price):
        self.num_operations +=1 
        
        if self.is_long_open:
            result=self.amount * (self.long_open_price - price)
            self.is_long_open = False #reiniciar variable despues de cerrar
            self.long_open_price =0
            
            
        elif self.is_short_open:
            result = self.amount * (price - self.short_open_price)
            self.is_short_open = False #reiniciar variable despues de cerrar
            self.short_open_prrice=0
            
            
        self.profit.append(result) #agregar el resultado de la operacion, sea + o -
        self.balance += result
            
        if result > 0:
            self.winned +=1
            self.drawdown.append(0)
        else:
            self.lossed +=1
            self.drawdown.append(result)
            
        #reiniciamos estos otros indicadores    
        self.take_profit_price=0
        self.stop_loss_price =0
            
                        
        
    def set_take_profit(self, price, tp_long=1.05, tp_short=0.95): 
        if self.is_long_open:
            self.take_profit_price = price*tp_long
            
        elif self.is_short_open:
            self.take_profit_price = price*tp_short
    def set_stop_loss(self, price, sl_long=0.99, sl_short=1.01):
        if self.is_long_open:
            self.stop_loss_price = price*sl_long
            
        if self.is_short_open:
            self.stop_loss_price = price *sl_short
            
    def return_results(self, symbol, start_date, end_date):
        
        profit = sum(self.profit)
        drawdown = sum(self.drawdown)
        fees = (abs(profit)*self.fee_cost*self.num_operations)
        
        results ={
        'symbol':symbol,
        'start_date':start_date,
        'end_date':end_date,
        'balance':self.balance,
        'profit':profit,
        'drawdown':drawdown,
        'profit_after_fees':profit-fees,
        'num_operations':self.num_operations,
        'num_long':self.num_longs,
        'num_shorts':self.num_shorts,
        'winned':self.winned,
        'lossed': self.lossed
        }
        
        if self.num_operations >0:
            winrate=self.winned/self.num_operations
            results['winrate']=winrate
            results['fitness_function']=((profit-abs(drawdown))*winrate)/self.num_operations
        else:
            results['winrate']=0
            results['fitness_function']=0
        
        return results
    
    def __backtesting__(self, df, strategy):
        high=df['high']
        close=df['close']
        low=df['low']
        
        for i in range(len(df)):
            if self.balance>0:
                
                if strategy.checkLongSignal(i):
                    self.open_position(price=close[i], side='long', from_opened=i)
                    
                    self.set_take_profit(price=close[i], tp_long=1.05)
                    self.set_stop_loss(price=close[i], sl_long=0.99)
                    
                elif strategy.checkShortSignal(i):
                    self.open_position(price=close[i], side='short', from_opened=i)
                    
                    self.set_take_profit(price=close[i], tp_short=0.95)
                    self.set_stop_loss(price=close[i], sl_short=1.01)
                else:
                    if self.trailing_stop_loss and (self.is_long_open or self.is_short_open):
                        new_max=high[self.from_opened:i].max()
                        previous_stop_loss=self.stop_loss_price
                        self.set_stop_loss(price=new_max)
                        
                        if previous_stop_loss > self.stop_loss_price:
                            self.stop_loss_price = previous_stop_loss
                    if self.is_long_open:
                        if high[i]>= self.take_profit_price:
                            self.close_position(price=self.take_profit_price)
                        elif low[i]<= self.stop_loss_price:
                            self.close_position(price = self.stop_loss_price)
                    elif self.is_short_open:
                        if high[i] >= self.stop_loss_price:
                            self.close_position(price=self.stop_loss_price)
                        elif low[i] <= self.take_profit_price:
                            self.close_position(price=self.take_profit_price)
    

strategy=BBStrategy()
strategy.setUp(df)

trypack=Backtester()
trypack.__backtesting__(df, strategy)
print(trypack.return_results(symbol='-',start_date='-',end_date='-'))


